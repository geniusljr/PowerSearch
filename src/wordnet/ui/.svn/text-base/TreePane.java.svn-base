package wordnet.ui;

import javax.swing.*;
import javax.swing.Timer;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.util.List;
import wordnet.base.*;

public class TreePane extends JPanel implements Runnable {

	private static final long serialVersionUID = -5900447289566704451L;
	// 画布大小
	public static int FRAME_SIZE = 590;
	// 节点间连线的颜色
	private final Color LineColor = Color.LIGHT_GRAY;
	// 被选中节点的颜色
	private final Color SelectedColor = new Color(222, 74, 74);
	// 字体颜色
	private final Color FontColor = Color.BLACK;
	// 背景颜色
	private final Color BackGroundColor = Color.white;/* new Color(238, 238, 238) */;

	// 渲染画布的时间间隔
	private final int RenderTime = 1;
	// 节点移动的时间间隔
	private final double MoveTime = 0.3;
	// 存储所有节点
	private List<TreeNode> nodes;
	// 存储所有被选中节点
	private List<Integer> selected;
	// 中心节点
	private TreeNode centerNode;
	// 中心节点的单词
	private String centerWord;
	// 中心坐标
	private final static int CENTER_X = TreePane.FRAME_SIZE / 2;
	private final static int CENTER_Y = TreePane.FRAME_SIZE / 2;
	// 最初随机产生所有节点的距离半径上限
	private final static int CENTER_R = TreePane.FRAME_SIZE / 3;

	// 鼠标坐标
	private int mouseX;
	private int mouseY;
	// 缓存鼠标坐标
	private int tmpX;
	private int tmpY;
	// 计时器
	private static Timer timer;
	// 中心节点单词，数据结构MyWord
	private MyWord myword;

	private int count = 0;
	private int tmpcount = 0;

	ImageIcon[] icon = new ImageIcon[7];

	// 控制画布的渲染
	ActionListener taskPerformer = new ActionListener() {
		public void actionPerformed(ActionEvent e) {
			reLocate();
			repaint();
			count++;
			if (count > 5000)
				count = 0;
		}
	};
	// 鼠标拖动监听器
	MouseMotionListener mousedrag = new MouseMotionAdapter() {
		public void mouseDragged(MouseEvent e) {
			// 当前鼠标位置
			mouseX = e.getX();
			mouseY = e.getY();
			for (int i = 0; i < selected.size(); i++) {
				// 拖动所有被选中节点
				TreeNode temp = nodes.get(selected.get(i));
				temp.setLocation(temp.getX() + mouseX - tmpX, temp.getY()
						+ mouseY - tmpY);
			}
			// 更新鼠标位置
			tmpX = mouseX;
			tmpY = mouseY;
			// 重绘图像
			repaint();
		}
	};
	// 鼠标点击监听器
	MouseListener mousepress = new MouseAdapter() {
		public void mousePressed(MouseEvent e) {
			setFocus();
			tmpX = e.getX();
			tmpY = e.getY();
			boolean chosen = false;
			int totalnum = nodes.size();
			for (int i = 0; i < totalnum; i++) {
				TreeNode tmp = nodes.get(i);
				// 如果鼠标点击在某个节点范围内发生
				if (tmp.getBounds().contains(tmpX, tmpY)) {
					chosen = true;
					// ctrl+单击，则连续选中节点
					if (e.isControlDown()) {
						if (!selected.contains(i))
							selected.add(i);
						else
							selected.remove(i);
					} else {
						System.out.println(tmp.getState());
						selected = new ArrayList<Integer>();
						selected.add(i);
					}
					// 双击，则把点击的节点作为中心节点展开
					if (e.getClickCount() == 2
							&& e.getButton() == MouseEvent.BUTTON1) {
						if (tmp == centerNode)
							return;
						if (tmp.getState() != 5 && tmp.getState() != 6) {
							MainWindow.mw.searchStart(tmp.getName(), false);
							return;
						}
						init();
					}
					// 右键单击，则把该节点的所有同义词节点展开，添加到画布中
					else if (Math.abs(count - tmpcount) > 50
							&& e.getButton() == MouseEvent.BUTTON3) {
						if (tmp.getState() == 0 || tmp.getState() == 2)
							return;
						addNode(tmp);
						tmpcount = count;
						return;
					} else if (e.getButton() == MouseEvent.BUTTON1
							&& e.getClickCount() == 1) {
						// 如果在中间层意思节点范围内，则设置其属性为5，用来使其意思字符串可以被画出
						if (tmp.getState() == 2) {
							tmp.setState(5);
							repaint();
							return;
						}
						if (tmp.getState() == 3) {
							tmp.setState(6);
							repaint();
							return;
						}
					}
					// 重绘图像
					repaint();
				}
				if (!chosen)
					selected = new ArrayList<Integer>();
			}
		}

		public void mouseReleased(MouseEvent e) {
			int x = e.getX();
			int y = e.getY();
			int totalnum = nodes.size();
			for (int i = 0; i < totalnum; i++) {
				TreeNode tmp = nodes.get(i);
				if (!tmp.getBounds().contains(x, y) && tmp.getState() == 5)
					tmp.setState(2);
				else if (!tmp.getBounds().contains(x, y) && tmp.getState() == 6)
					tmp.setState(3);
			}
		}
	};

	// 获取焦点
	private void setFocus() {
		this.grabFocus();
	}

	/**
	 * 以_myword为中心节点，绘制图像
	 */
	public TreePane(MyWord _myword) {
		myword = _myword;
		for (int i = 0; i < 6; i++) {
			icon[i] = new ImageIcon(
					MainWindow.class.getResource("/resources/icons/ball" + i
							+ ".png"));
		}
		this.setOpaque(false);
		setFocus();
		run();
	}

	/**
	 * 设置中心节点
	 */
	public void setCenterWord(MyWord _word) {
		myword = _word;
		run();
	}

	/**
	 * 设置中心节点，初始化所有节点数组，选中节点数组，设置中心节点坐标 将当前中心节点添加到画布中展开
	 */
	private void init() {
		this.setSize(TreePane.FRAME_SIZE, TreePane.FRAME_SIZE);
		centerWord = myword.getName();
		centerNode = new TreeNode(centerWord);
		centerNode.setState(0);
		selected = new ArrayList<Integer>();
		nodes = new ArrayList<TreeNode>();
		centerNode.setLocation(CENTER_X, CENTER_Y);
		// 将centerNode作为中心节点展开
		addNode(centerNode);
	}

	/**
	 * 展开节点treenode 将其同义词类的所有子节点都添加到画布当中
	 */
	private void addNode(TreeNode treenode) {
		// 保存当前节点的所有直接子节点
		List<TreeNode> tmpcenterChildren = new ArrayList<TreeNode>();
		// 保存展开treenode所需要的所有节点
		List<TreeNode> tmpnodes = new ArrayList<TreeNode>();
		// 展开新节点后要初始化被选中节点数组，清空
		selected = new ArrayList<Integer>();

		// 待展开treenode的单词数组
		String tmpcenterWord = treenode.getName();
		// 当前节点的MyWord类
		MyWord newword;

		if (!treenode.equals(centerNode)) {
			// 如果该节点不是中心节点，则需要重新查询该单词的所有同义词反义词类
			// 且设置其属性为新展开节点4
			treenode.setState(4);
			newword = new MyWord(tmpcenterWord);
		} else {
			// 是中心节点，设置属性为中心节点0
			treenode.setState(0);
			newword = myword;
		}

		tmpnodes.add(treenode);

		// 同义词
		PartOfSpeach[] pos = new PartOfSpeach[4];
		for (int i = 0; i < 4; i++) {
			pos[i] = newword.getPOS(i);
			if (pos[i] != null) {
				int tempnum = pos[i].getSense().size();
				for (int j = 0; j < tempnum; j++) {

					// 中间层节点，其表示的字符串是其父节点单词的一个意思
					TreeNode tmp = new TreeNode("Sense: "
							+ pos[i].getSense().get(j).getExpression()
									.substring(2), treenode);
					// 设置其属性为中间层意思节点
					tmp.setState(2);
					List<String> tempchildren = pos[i].getSense().get(j)
							.getSynGroup();
					int childnum = tempchildren.size();
					if (true) {
						// 如果该意思下只有自己，即没有其他同义词，则不展开该synset
						for (int k = 0; k < childnum; k++) {
							if (!tempchildren.get(k).equals(treenode.getName())) {
								// 展开该意思下的所有同义词，但不包括自己
								TreeNode tmpChild = new TreeNode(
										tempchildren.get(k), tmp);
								// 设置属性为最外层单词节点
								tmpChild.setState(1);
								tmpnodes.add(tmpChild);
							}
						}
						tmpcenterChildren.add(tmp);
						// System.out.println(tmp.getName());
					}
				}
			}
		}
		tmpnodes.addAll(tmpcenterChildren);

		// 反义词
		// 设置属性为最外层单词节点
		TreeNode tmpcenterAntonym = new TreeNode("", treenode);
		// 设置其属性为反义词节点
		tmpcenterAntonym.setState(3);

		// 存储所有反义词单词
		List<String> antonymChildren = newword.getAntonym();

		int antonymNum = antonymChildren.size();
		if (antonymNum != 0) {
			tmpnodes.add(tmpcenterAntonym);
			tmpcenterChildren.add(tmpcenterAntonym);

			// 用Set来删除所有反义词中相同的单词
			Set<String> antonymSet = new HashSet<String>();
			for (int i = 0; i < antonymNum; i++) {
				antonymSet.add(antonymChildren.get(i));
			}
			for (String str : antonymSet) {
				// 用反义词来构造最外层子节点
				TreeNode tmpChild = new TreeNode(str, tmpcenterAntonym);
				// 设置其属性为最外层但此节点1
				tmpChild.setState(1);
				tmpnodes.add(tmpChild);
			}
		}

		// 随机初始化所有节点的位置
		int tmpcenterChildNum = tmpcenterChildren.size();
		for (int i = 0; i < tmpcenterChildNum; i++) {
			// 初始化中间层节点的位置
			double tempR = (Math.random() * CENTER_R / 10);
			double tempX = (treenode.getX() + Math.cos(2 * Math.PI * i
					/ tmpcenterChildNum)
					* tempR);
			double tempy = (treenode.getY() + Math.sin(2 * Math.PI * i
					/ tmpcenterChildNum)
					* tempR);
			TreeNode tempChild = tmpcenterChildren.get(i);
			tempChild.setLocation(tempX, tempy);
			int tempChildNum = tmpcenterChildren.get(i).getChildNum();
			for (int j = 0; j < tempChildNum; j++) {
				// 初始化最外层节点的位置
				double tmpR = (Math.random() * CENTER_R / 15);
				double tmpX = (tempX + Math.cos(2 * Math.PI * j / tempChildNum)
						* tmpR);
				double tmpY = (tempy + Math.sin(2 * Math.PI * j / tempChildNum)
						* tmpR);
				tempChild.getChild(j).setLocation(tmpX, tmpY);
			}
		}
		// 将所有节点添加到nodes数组中
		nodes.addAll(tmpnodes);
		// 清空节点力，速度，加速度
		for (TreeNode x : nodes) {
			x.clearForceAndV();
		}
		// 重绘图像
		repaint();
	}

	/**
	 * 根据受力分析，重新分布所有节点
	 */
	private void reLocate() {
		// 先计算所有节点的受力情况
		calculateForce();
		// 使所有节点移动到新的坐标位置
		int totalnum = nodes.size();
		for (int i = 0; i < totalnum; i++)
			nodes.get(i).move(MoveTime);
	}

	/**
	 * 重绘图像
	 */
	public void paint(Graphics g) {
		super.paint(g);
		// 设置背景颜色
		this.setBackground(BackGroundColor);
		int totalnum = nodes.size();
		for (int i = 1; i < totalnum; i++) {
			TreeNode tmp = nodes.get(i);
			String str = tmp.getName();
			TreeNode tmpParent = tmp.getParent();
			if (tmpParent != null) {
				// 设置连线颜色且画出连线
				g.setColor(LineColor);
				g.drawLine((int) (tmp.getX()) + TreeNode.WIDTH / 2,
						(int) (tmp.getY()) + TreeNode.HEIGHT / 2,
						(int) (tmpParent.getX()) + TreeNode.WIDTH / 2,
						(int) (tmpParent.getY()) + TreeNode.HEIGHT / 2);
			}
			// 设置字体颜色
			if (selected.contains(i))
				g.setColor(SelectedColor);
			else
				g.setColor(FontColor);
			// 画出字符串
			if (tmp.getState() != 2 && tmp.getState() != 3) {
				g.setFont(new Font("Comic Sans MS", Font.PLAIN, 13));
				if (tmp.getState() == 5 || tmp.getState() == 6) {
					g.setColor(Color.RED);
					g.setFont(new Font("Comic Sans MS", Font.BOLD, 15));
				}
				g.drawString(str, (int) (tmp.getX()) + 10,
						(int) (tmp.getY()) + 10);
				if (tmp.getState() == 5)
					g.drawString("Relation: synonym of "
							+ tmp.getParent().getName(),
							(int) (tmp.getX() + 10), (int) (tmp.getY() - 10));
				if (tmp.getState() == 6)
					g.drawString("Relation: antonym of "
							+ tmp.getParent().getName(),
							(int) (tmp.getX() + 10), (int) (tmp.getY() - 10));
			}
			/*
			 * //设置节点颜色 if (selected.contains(i)) g.setColor(SelectedColor);
			 * else { g.setColor(tmp.getColor()); } //绘制节点
			 * g.fillOval((int)(tmp.getX()), (int)(tmp.getY()), TreeNode.WIDTH,
			 * TreeNode.HEIGHT);
			 */
			g.drawImage(icon[tmp.getState()].getImage(), (int) (tmp.getX()),
					(int) (tmp.getY()), this);
		}
		if (selected.contains(0))
			g.setColor(SelectedColor);
		else
			g.setColor(centerNode.getColor());
		// 绘制中心节点
		// g.fillOval((int)(centerNode.getX()), (int)(centerNode.getY()),
		// TreeNode.WIDTH, TreeNode.HEIGHT);
		g.drawImage(icon[0].getImage(), (int) (centerNode.getX()),
				(int) (centerNode.getY()), this);
		g.setFont(new Font("Centaur", Font.BOLD, 25));
		g.drawString(centerWord, (int) centerNode.getX(),
				(int) centerNode.getY());

	}

	/**
	 * 对所有节点的受力分析 每个节点相当于一个带电粒子，节点间的连线相当于弹簧
	 * 每个节点受到其他节点所给的斥力，弹簧的弹力，运动间与地面产生的摩擦力，墙壁给的斥力
	 * 根据库仑定律，胡克定律等物理定律求出每个点收到的作用力然后求出合力
	 */
	private void calculateForce() {
		// 电荷斥力系数，相当于库仑定律中的K
		double repulsion_factor = 3.0;
		// 弹簧的平衡长度
		double springlength = 100.0;
		// 弹簧的弹性系数
		double spring_factor = 5;
		// 摩擦系数
		double friction_factor = 30;
		// 墙的作用力系数
		double wall_factor = 0.25;

		int totalnum = nodes.size();
		for (int i = 1; i < totalnum; i++) {

			// 电荷斥力
			double repulsionX = 0.0;
			double repulsionY = 0.0;
			TreeNode self = nodes.get(i);
			double selfx = self.getX();
			double selfy = self.getY();
			for (int j = 0; j < totalnum; j++) {
				if (j == i)
					continue;
				double dx = selfx - nodes.get(j).getX();
				double dy = selfy - nodes.get(j).getY();
				double r2 = dx * dx + dy * dy;
				if (r2 == 0) {
					dx = dy = 1;
					r2 = 2;
				}
				TreeNode tempparent = self.getParent();
				// 减小同一个父节点上的子节点的相互作用力
				if (tempparent != centerNode
						&& tempparent == nodes.get(j).getParent())
					repulsion_factor = 1.1;
				else if (tempparent == centerNode
						&& nodes.get(j).getParent() == centerNode)
					repulsion_factor = 4.0;
				else
					repulsion_factor = 2.0;
				// F = K*Q1*Q2/r^2;
				double repulsion_forcex = repulsion_factor * self.equantity
						* nodes.get(j).equantity * (dx) / r2;
				double repulsion_forcey = repulsion_factor * self.equantity
						* nodes.get(j).equantity * (dy) / r2;
				// 限定每个力的绝对值上限
				if (repulsion_forcex > 100)
					repulsion_forcex = 100;
				if (repulsion_forcey > 100)
					repulsion_forcey = 100;
				if (repulsion_forcex < -100)
					repulsion_forcex = -100;
				if (repulsion_forcey < -100)
					repulsion_forcey = -100;
				repulsionX += repulsion_forcex;
				repulsionY += repulsion_forcey;
			}
			// 当作用力很大的时候，将其变小
			double d = Math.sqrt(repulsionX * repulsionX + repulsionY
					* repulsionY);
			if (d > 100) {
				repulsionX *= 100 / d;
				repulsionY *= 100 / d;
			}

			// 弹簧拉力
			double tensionX = 0.0;
			double tensionY = 0.0;
			// 存储该节点的父节点和其子节点的数组
			// 只有这些节点与该节点之间存在一个弹簧
			List<TreeNode> tempnodes = new ArrayList<TreeNode>();
			if (self.getParent() != null)
				tempnodes.add(self.getParent());
			for (int j = 0; j < self.getChildNum(); j++)
				tempnodes.add(self.getChild(j));
			int tempnodesnum = tempnodes.size();
			for (int j = 0; j < tempnodesnum; j++) {
				double dx = tempnodes.get(j).getX() - selfx;
				double dy = tempnodes.get(j).getY() - selfy;
				double r = Math.sqrt(dx * dx + dy * dy);
				if (r == 0) {
					dx = dy = 1;
					r = 1.414;
				}
				if (self.getParent() == centerNode
						&& tempnodes.get(j) == centerNode)
					springlength = 150.0;
				else
					springlength = 70.0;
				// 该弹簧只有当长度超过springlength的时候会产生拉力
				// 但是很短的时候不会产生斥力
				// F = k * (r -L);
				if (r > springlength) {
					double tension_forcex = dx / r;
					double tension_forcey = dy / r;
					tension_forcex *= spring_factor * (r - springlength);
					tension_forcey *= spring_factor * (r - springlength);
					tensionX += tension_forcex;
					tensionY += tension_forcey;
				}
			}
			// 当作用力很大的时候，将其变小
			double s = Math.sqrt(tensionX * tensionX + tensionY * tensionY);
			if (s > 100) {
				tensionX *= 100 / s;
				tensionY *= 100 / s;
			}

			// 摩擦力
			// F = -k * v
			double frictionX = -friction_factor * self.getVx();
			double frictionY = -friction_factor * self.getVy();

			// 墙的作用力，节点偏离中心越远，则作用力越大
			double wallX = -(self.getX() - TreePane.FRAME_SIZE / 2)
					* wall_factor;
			double wallY = -(self.getY() - TreePane.FRAME_SIZE / 2)
					* wall_factor;

			// 合力
			double forceX = repulsionX + frictionX + tensionX + wallX;
			double forceY = repulsionY + frictionY + tensionY + wallY;

			self.addForce(forceX, forceY);
		}
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		init();
		if (timer != null)
			timer.stop();
		timer = new Timer(RenderTime, taskPerformer);
		timer.start();
		this.setBounds(590, 40, 600, 600);
		this.addMouseListener(mousepress);
		this.addMouseMotionListener(mousedrag);
	}
}
